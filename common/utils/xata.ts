// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from '@xata.io/client';
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from '@xata.io/client';

const tables = [
  {
    name: 'plants',
    columns: [
      { name: 'type', type: 'string', notNull: true, defaultValue: 'unknown' },
      { name: 'client_id', type: 'string', unique: true },
      { name: 'name', type: 'string', unique: true },
      { name: 'indoor', type: 'bool', notNull: true, defaultValue: 'true' },
      { name: 'last_watered', type: 'datetime' },
      { name: 'next_water', type: 'datetime' },
      { name: 'water_schedule', type: 'multiple' },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Plants = InferredTypes['plants'];
export type PlantsRecord = Plants & XataRecord;

export type DatabaseSchema = {
  plants: PlantsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    'https://KaylaKZJ-s-workspace-i0mnkq.eu-west-1.xata.sh/db/plant-care-app',
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};

export const xata = new XataClient();
